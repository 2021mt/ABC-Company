using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Text;
using Application.Model;
using Application.DB;
using System.Configuration;

namespace Application
{
    public sealed class GeneralUtilities
    {
        // All methods are static, so this can be private
        private GeneralUtilities()
        { }

        static string appMode = ConfigurationManager.AppSettings["App_Mode"].ToString().Trim();

       
        /// <summary>
        /// Encode the password
        /// </summary>
        /// <param name="password"></param>
        /// <returns></returns>
        public static string EncodePasswordToBase64(string password)
        {
            try
            {
                byte[] encData_byte = new byte[password.Length];
                encData_byte = System.Text.Encoding.UTF8.GetBytes(password);
                string encodedData = Convert.ToBase64String(encData_byte);
                return encodedData;
            }
            catch (Exception ex)
            {
                throw new Exception("Error in base64Encode" + ex.Message);
            }
        }

        /// <summary>
        /// Decode the encrypted password
        /// </summary>
        /// <param name="encodedData"></param>
        /// <returns></returns>
        public static string DecodePasswordFrom64(string encodedData)
        {
            System.Text.UTF8Encoding encoder = new System.Text.UTF8Encoding();
            System.Text.Decoder utf8Decode = encoder.GetDecoder();
            byte[] todecode_byte = Convert.FromBase64String(encodedData);
            int charCount = utf8Decode.GetCharCount(todecode_byte, 0, todecode_byte.Length);
            char[] decoded_char = new char[charCount];
            utf8Decode.GetChars(todecode_byte, 0, todecode_byte.Length, decoded_char, 0);
            string result = new String(decoded_char);
            return result;
        }

  


        /// <summary>
        /// Get the user public IP address
        /// </summary>
        /// <returns></returns>
        public static string GetUserIPAddress()
        {
            string VisitorsIPAddr = string.Empty;
            if (HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"] != null)
            {
                VisitorsIPAddr = HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"].ToString().Trim();
            }
            else if (HttpContext.Current.Request.UserHostAddress.Length != 0)
            {
                VisitorsIPAddr = HttpContext.Current.Request.UserHostAddress.Trim();
            }
            return VisitorsIPAddr;
        }
    }
}
